#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import re
from itertools import groupby
from src.context import *
from src.metadata import *
from src.module import *
from src.engine import Engine
from src.java import *
from enum import Enum

def read_table(line, space_character):
	str = line.lstrip().rstrip().split(space_character)
	if (len(str) > 2):
		# print(str)
		return 	table_metadata.new_table(str[len(str)-1],str[0])
	if (len(str) < 2):
		print('read_table table line %s' % (str))
	return table_metadata.new_table(str[1],str[0])
	
#str值为|      | ID                | `id`           | `BIGINT(19)`   | Y    | N        | Y        |        |                                                   |
def read_field(str,space_character):
	if str.count('-') > 0:
		return None
	chinese_name_index, name_index = 2, 3
	type_index, pk_index, nullable_index = 4, 5, 6
	unique_index, default_value_index, note_index = 7, 8, 9
	ss = del_space(str, space_character)
	if len(re.findall('[\u4e00-\u9fa5]',ss[name_index])) > 0 :#检查是否包含汉字
		return None
	f = table_metadata.new_field(ss[name_index], ss[chinese_name_index], ss[type_index])
	return f.is_pk(ss[pk_index] == 'Y').nullable(ss[nullable_index] == 'Y')\
			.unique(ss[unique_index] == 'Y').default_value(ss[default_value_index])\
			.note(ss[note_index])
	
def del_space(str,space_character):
	"""根据分隔符，拆分字符，将拆分后的字符数组去掉空格

	Args:
		str: | 字段      | 类型    | 描述                  |

	"""
	s = str.lstrip().rstrip().split(space_character)
	ss = list(map(lambda s: s.lstrip().rstrip().replace('`', ''), s))
	return ss

def new_module(str):
	"""
	Args:
		str: ## 机构接口 institutions

	"""
	s = del_space(str, ' ')
	current_module = metadata.Module(s[-1])
	if modules.get(current_module.name) is not None:
		current_module = modules[current_module.name]
	else :
		modules[current_module.name] = current_module
	return current_module

#相关环境变量设置
workspace_root='/Users/jliu/Develop/workspace/ktjr/tt/'
CONTEXT.workspace = workspace_root
CONTEXT.package = 'com.tt'
#表结构
modules = {}
current_module = None
current_table = None
Table_Phase = Enum('Table_Phase', ('ModuleName', 'Name', 'Field'))
with open('./template/设计规范/数据结构规范.md', 'r') as table_file:
	for i, l in enumerate(table_file.readlines()):
		line = l.strip().lstrip().rstrip() # 把末尾的'\n'删掉
		if len(line) == 0:
			continue
		if re.match('^##\s', line) : # ## 机构 institutions
			phase = Table_Phase.ModuleName
			current_module = new_module(line)
			continue
		if re.match('^###\s', line) : # ### 邮件模板配置表 email_notification
			line = line.replace('###','').lstrip().rstrip()
			if (len(line) == 0):
				print('\033[1;32;43m table name is None %s \033[0m')
				continue	
			current_table = read_table(line, ' ')
			current_module.add_table(current_table)
			continue
		row = re.findall('^\|.*\|',line)
		if (len(row) == 1):
			f = read_field(line, '|')
			if current_table != None:
				current_table.add_fields(f);
		else:
			print('\033[1;32;43m table line(%s) = %s \033[0m' % (i, line))

#接口文档
current_action = None
phase = None #接口文档段落
group = action_metadata.Paramter.DEFAULT_GROUP
Interface_Phase = Enum('Interface_Phase', ('ModuleName', 'Name', 'Url', 'Method', 'RequestType', 'RequestParamter', 'RequestEg', 'ResponseType', 'ResponseParamter', 'ResponseEg'))
with open('./template/设计规范/接口文档规范.md', 'r') as interfacr_filr:
	for i,l in enumerate(interfacr_filr.readlines()):
		line = l.strip().lstrip().rstrip() # 把末尾的'\n'删掉
		if len(line) == 0:
			continue
		if re.match('^##\s', line) : # ## 机构接口 institutions
			phase = Interface_Phase.ModuleName
			current_module = new_module(line)
			continue
		if re.match('^###\s', line) : # 接口中文名称
			phase = Interface_Phase.Name
			line = line.replace('###','').lstrip().rstrip()		
			if (len(line) == 0):
				print('\033[1;32;43m interface name is None %s \033[0m')
				continue		
			current_action = action_metadata.new_action('', line)
			current_module.add_action(current_action)
		if line.startswith('-'):
			line = line.replace('`', '').lstrip().rstrip()
			if line.find('接口路径') != -1:#  - 接口路径: `/op/v1/institutions/search`
				phase = Interface_Phase.Url
				url = line.split(':')[-1].lstrip().rstrip()
				if not url.startswith('/') :
					print('\033[1;32;43m url is error 第%d行 行内容 %s \033[0m' % (i,line))
					continue
				current_action.url(url)
				#根据url的第三级目录分析模块英文名称
				# if modules.get(current_action.module_name()) is not None:
				# 	current_module = modules[current_action.module_name()]
				# 	current_module.add_action(current_action)
				# else :
				# 	modules[current_action.module_name()] = current_module = metadata.Module(current_action.module_name())
				# 	current_module.add_action(current_action)

			if line.find('HTTP Method') != -1:# - HTTP Method: `GET`
				phase = Interface_Phase.Method
				current_action.http_method(line.split(':')[-1])
		# 		# print(current_action)
			if line.find('请求参数格式') != -1:#  - 请求参数格式: `QUERY STRING`
			# 	current_action.request_type(line.split(':')[-1])
				phase = Interface_Phase.RequestType

			if line.find('请求参数字段') != -1:#  - 请求参数字段
				phase = Interface_Phase.RequestParamter
				group = action_metadata.Paramter.DEFAULT_GROUP

		# 		params_type = True
		# 		if lines[i+1].find('|') == -1: #无参数
		# 			pass
				continue
			if line.find('请求示例') != -1:#  - 请求示例
				phase = Interface_Phase.RequestEg
				# params_type = 'Request
			if line.find('响应类型') != -1:#  - 响应类型
				phase = Interface_Phase.ResponseType
		# 		# print(line.split(':')[-1])
		# 		current_action.set_response_type(line.split(':')[-1])
		# 		pass

			if line.find('响应字段') != -1:#  - 响应字段
				phase = Interface_Phase.ResponseParamter
				group = action_metadata.Paramter.DEFAULT_GROUP

				continue
			if line.find('响应示例') != -1:#  - 响应字段
				phase = Interface_Phase.ResponseEg

		row = re.findall('^\|.*\|',line)
		if (phase == Interface_Phase.RequestParamter or phase == Interface_Phase.ResponseParamter):
			if (len(row) == 1):
				if line.count('-') > 0:
					continue
				if len(re.findall('字段',line)) and  len(re.findall('类型',line)) > 0 :
					continue
				parms = del_space(line, '|')
				# print(parms)
				if (phase == Interface_Phase.RequestParamter):
					current_action.add_request_params(parms[1], parms[2], parms[4], group)
				if (phase == Interface_Phase.ResponseParamter):
					current_action.add_response_params(parms[1], parms[2], parms[3], group)
			elif line.startswith('-'):
				# 设置参数group
				l = line.replace('`', '').lstrip().rstrip().split(' ')
				group = l[1];

			else:
				print('\033[1;32;43m interface line(%s) = %s \033[0m' % (i, line))

# parse()
Engine()\
	.reader()\
	.reader_table().reader_interface()\
	.config_mapping(java.JavaClassLanguageMapping)\
	.mapping(modules)\
	# .config_module(java.JavaModule)\
	# .generator(modules)




	# if current_action != None:
	# 	if current_action.check():
	# 		print(current_action)
	# 	else:
	# 		print('\033[1;32;43m action  \033[0m')
# for k, g in groupby(actions,key=lambda x:x.module_name):
# 	print(k,list(g))

# print(current_table)
# write_parent(workspace_root,'ktjr.lcl')
# write_project(workspace_root,'ktjr.lcl',current_table, current_action)
# actions = []
# generatorjava.write_projects(workspace_root,'creditcloud',tables, actions)


